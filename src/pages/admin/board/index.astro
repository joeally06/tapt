---
import Layout from '../../../layouts/Layout.astro';
import AdminNav from '../../../components/AdminNav.astro';
import { supabase, isAdmin } from '../../../lib/supabase';

// Check if user is authenticated and admin
const { data: { session } } = await supabase.auth.getSession();
if (!session) {
  return Astro.redirect('/login');
}

const admin = await isAdmin();
if (!admin) {
  return Astro.redirect('/');
}

// Get board members
const { data: boardMembers } = await supabase
  .from('board_members')
  .select('*')
  .order('name');
---

<Layout title="Manage Board Members">
  <AdminNav currentPath="/admin/board" />
  
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold text-gray-900">Manage Board Members</h1>
      <button
        id="add-member"
        class="bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors"
      >
        Add Board Member
      </button>
    </div>

    <div class="grid grid-cols-1 gap-6">
      {boardMembers?.map((member) => (
        <div class="bg-white p-6 rounded-lg shadow-md">
          <div class="flex justify-between items-start">
            <div>
              <h2 class="text-xl font-semibold text-primary-700">{member.name}</h2>
              <p class="text-gray-600">{member.title}</p>
            </div>
            <div class="flex space-x-2">
              <button
                class="edit-member text-primary-600 hover:text-primary-800"
                data-member={JSON.stringify(member)}
              >
                Edit
              </button>
              <button
                class="delete-member text-red-600 hover:text-red-800"
                data-id={member.id}
              >
                Delete
              </button>
            </div>
          </div>
          
          <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <p class="text-sm text-gray-500">Role</p>
              <p class="text-gray-700">{member.role || '-'}</p>
            </div>
            <div>
              <p class="text-sm text-gray-500">Organization</p>
              <p class="text-gray-700">{member.organization || '-'}</p>
            </div>
            <div>
              <p class="text-sm text-gray-500">Location</p>
              <p class="text-gray-700">{member.location || '-'}</p>
            </div>
            <div>
              <p class="text-sm text-gray-500">Term</p>
              <p class="text-gray-700">{member.term || '-'}</p>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>

  <!-- Member Form Modal -->
  <div id="member-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl">
        <div class="p-6">
          <h3 class="text-xl font-semibold text-gray-900 mb-4" id="modal-title">Add Board Member</h3>
          
          <form id="member-form" class="space-y-4">
            <input type="hidden" id="member-id" />
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700">Name</label>
                <input
                  type="text"
                  id="name"
                  required
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700">Title</label>
                <input
                  type="text"
                  id="title"
                  required
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700">Role</label>
                <input
                  type="text"
                  id="role"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700">Organization</label>
                <input
                  type="text"
                  id="organization"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700">Location</label>
                <input
                  type="text"
                  id="location"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700">Term</label>
                <input
                  type="text"
                  id="term"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
              </div>
              
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700">Image URL</label>
                <input
                  type="url"
                  id="image_url"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
              </div>
              
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700">Website</label>
                <input
                  type="url"
                  id="website"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
              </div>
              
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700">Notes</label>
                <textarea
                  id="notes"
                  rows="3"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                ></textarea>
              </div>
            </div>

            <div class="mt-6 flex justify-end space-x-3">
              <button
                type="button"
                id="cancel-button"
                class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                type="submit"
                class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
              >
                Save
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../../../lib/supabase';

  const modal = document.getElementById('member-modal');
  const form = document.getElementById('member-form') as HTMLFormElement;
  const modalTitle = document.getElementById('modal-title');
  const addButton = document.getElementById('add-member');
  const cancelButton = document.getElementById('cancel-button');

  function showModal(title = 'Add Board Member') {
    if (modal && modalTitle) {
      modal.classList.remove('hidden');
      modalTitle.textContent = title;
    }
  }

  function hideModal() {
    if (modal && form) {
      modal.classList.add('hidden');
      form.reset();
    }
  }

  addButton?.addEventListener('click', () => {
    showModal();
  });

  cancelButton?.addEventListener('click', () => {
    hideModal();
  });

  // Handle edit buttons
  document.querySelectorAll('.edit-member').forEach(button => {
    button.addEventListener('click', () => {
      const member = JSON.parse((button as HTMLButtonElement).dataset.member || '{}');
      
      // Populate form
      Object.entries(member).forEach(([key, value]) => {
        const input = document.getElementById(key) as HTMLInputElement;
        if (input) {
          input.value = value as string;
        }
      });
      
      showModal('Edit Board Member');
    });
  });

  // Handle delete buttons
  document.querySelectorAll('.delete-member').forEach(button => {
    button.addEventListener('click', async () => {
      const id = (button as HTMLButtonElement).dataset.id;
      if (!id) return;
      
      if (confirm('Are you sure you want to delete this board member?')) {
        try {
          const { error } = await supabase
            .from('board_members')
            .delete()
            .eq('id', id);
            
          if (error) throw error;
          
          window.location.reload();
        } catch (error) {
          console.error('Error deleting board member:', error);
          alert('Failed to delete board member');
        }
      }
    });
  });

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    const id = (document.getElementById('member-id') as HTMLInputElement)?.value;
    
    try {
      if (id) {
        // Update existing member
        const { error } = await supabase
          .from('board_members')
          .update(data)
          .eq('id', id);
          
        if (error) throw error;
      } else {
        // Create new member
        const { error } = await supabase
          .from('board_members')
          .insert(data);
          
        if (error) throw error;
      }
      
      window.location.reload();
    } catch (error) {
      console.error('Error saving board member:', error);
      alert('Failed to save board member');
    }
  });
</script>